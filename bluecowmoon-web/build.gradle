apply plugin: "org.asciidoctor.convert"

project.parent.tasks.collectDocumentation.dependsOn project.tasks.asciidoctor

ext {
  snippetsDir = new File(project.buildDir, "generated-snippets")
}


dependencies {
  compile("org.springframework.boot:spring-boot-starter-web")
  compile("org.springframework.boot:spring-boot-starter-hateoas")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  
  compile(project(":bluecowmoon-core"))

  compileOnly("org.springframework.boot:spring-boot-configuration-processor")
  
  testCompile("org.springframework.restdocs:spring-restdocs-core")
  testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
}

test {
  outputs.dir snippetsDir
}

def bcmVersion = project.version.toString()

asciidoctor {
  dependsOn test
  inputs.dir snippetsDir
  attributes  \
             "snippets": snippetsDir,
          "revnumber": bcmVersion,
          "docinfo1": ""
  
  // See: https://github.com/asciidoctor/asciidoctor-gradle-plugin/issues/154
  def capturedOutput = []
  def listener = { capturedOutput << it } as StandardOutputListener
  
  logging.addStandardErrorListener(listener)
  logging.addStandardOutputListener(listener)
  
  doLast {
    logging.removeStandardOutputListener(listener)
    logging.removeStandardErrorListener(listener)
    capturedOutput.join('').with { output ->
      if (output =~ /include file not found:/) {
        throw new RuntimeException("Include file(s) not found.\n" + output)
      }
    }
  }
}

processResources {
  from("src/main/resources") {
    include "**/*.properties"
    include "**/*.yml"
    filter {
      it.replace("BLUE_COW_MOON_VERSION", project.version.toString())
    }
  }
}

compileJava {
  dependsOn processResources
}

jar {
  manifest {
    attributes("Implementation-Version": project.version.toString())
  }
}
